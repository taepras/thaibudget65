{"version":3,"sources":["logo.svg","components/Treemap.jsx","App.js","reportWebVitals.js","index.js"],"names":["Treemap","useDimensions","onResize","observe","unobserve","w","h","entr","width","height","svgRef","entry","useRef","useState","hierarchyBy","filters","setFilters","data","setData","preprocessedData","useMemo","map","d","AMOUNT","parseFloat","replace","nestedData","console","log","out","nest","i","key","inData","values","rollup","leaves","d3","l","entries","filter","useEffect","process","then","current","root","sum","value","sort","a","b","nodes","size","padding","round","treemap","treemapPieceGroup","selectAll","treemapPieceGroupEnter","enter","append","attr","style","treemapPieceMerged","merge","on","e","transition","duration","x0","y0","select","x1","y1","text","toLocaleString","exit","remove","ref","position","top","left","right","bottom","display","flexDirection","x","type","onClick","temp","splice","navigateTo","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.351baeaf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useMemo, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { nest } from 'd3-collection';\r\nimport useDimensions from 'react-cool-dimensions';\r\n\r\nfunction Treemap() {\r\n  const {\r\n    observe, unobserve, width, height, entry,\r\n  } = useDimensions({\r\n    onResize: ({\r\n      /* eslint-disable-next-line no-shadow */\r\n      observe, unobserve, w, h, entr,\r\n    }) => {\r\n      unobserve();\r\n      observe();\r\n    },\r\n  });\r\n\r\n  const svgRef = useRef(null);\r\n  const [hierarchyBy, setHierarchyBy] = useState([\r\n    'MINISTRY',\r\n    'BUDGETARY_UNIT',\r\n    'BUDGET_PLAN',\r\n    'OUPUT',\r\n    'PROJECT',\r\n    'CATEGORY_LV1',\r\n    'CATEGORY_LV2',\r\n    'CATEGORY_LV3',\r\n    'CATEGORY_LV4',\r\n    'CATEGORY_LV5',\r\n    'CATEGORY_LV6',\r\n  ]);\r\n  const [filters, setFilters] = useState(['all']);\r\n  const [data, setData] = useState([]);\r\n\r\n  let preprocessedData = useMemo(() => data.map(\r\n    d => ({\r\n      ...d,\r\n      AMOUNT: parseFloat(d.AMOUNT.replace(/,/g, ''))\r\n    })),\r\n    [data]\r\n  );\r\n\r\n  const navigateTo = (x, i) => {\r\n    console.log(x, i);\r\n    const temp = [...filters];\r\n    temp.splice(i + 1);\r\n    setFilters(temp);\r\n    console.log('temp', temp);\r\n  }\r\n\r\n  let nestedData = useMemo(\r\n    () => {\r\n      console.log('filters', filters);\r\n\r\n      let out = nest()\r\n      for (let i in filters) {\r\n        // console.log(hierarchyBy[i], filters[i])\r\n        out = out.key(d => d[hierarchyBy[i]])\r\n      }\r\n\r\n      let nested = out\r\n        .rollup((leaves) => d3.sum(leaves, l => l.AMOUNT))\r\n        .entries(preprocessedData);\r\n\r\n      let inData = {\r\n        key: 'root',\r\n        values: [{ key: 'all', values: nested }]\r\n      };\r\n\r\n      for (let i in filters) {\r\n        inData = inData.values.filter?.(d => d.key === filters[i])[0]\r\n      }\r\n      return inData;\r\n    },\r\n    [preprocessedData, filters, hierarchyBy]\r\n  );\r\n\r\n  useEffect(() => {\r\n    d3.csv(process.env.PUBLIC_URL + '/data.csv').then((d) => {\r\n      setData(d)\r\n    })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!svgRef.current) return;\r\n\r\n    console.log('nested', nestedData);\r\n\r\n    let root = d3.hierarchy(nestedData, d => d.values)\r\n      .sum(d => d.value)\r\n      .sort(function (a, b) { return b.value - a.value; });\r\n\r\n    let treemap = d3.treemap()\r\n      .size([width, height])\r\n      .padding(1)\r\n      .round(true);\r\n\r\n    let nodes = treemap(root)\r\n\r\n    console.log('nodes', nodes);\r\n\r\n    let svg = d3.select(svgRef.current);\r\n\r\n    let treemapPieceGroup = svg\r\n      .selectAll(\"g.treemap-piece\")\r\n      .data(root.leaves())\r\n\r\n    let treemapPieceGroupEnter = treemapPieceGroup\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"class\", \"treemap-piece\")\r\n\r\n    treemapPieceGroupEnter\r\n      .append(\"rect\")\r\n      // .attr('x', d => d.x0)\r\n      // .attr('y', d => d.y0)\r\n      .style(\"stroke\", \"black\")\r\n      .style(\"fill\", \"slateblue\")\r\n\r\n    treemapPieceGroupEnter\r\n      .append(\"text\")\r\n      .attr(\"class\", \"text-name\")\r\n      .attr(\"font-size\", \"15px\")\r\n      .attr(\"fill\", \"white\")\r\n    \r\n    treemapPieceGroupEnter\r\n      .append(\"text\")\r\n      .attr(\"class\", \"text-value\")\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"fill\", \"white\")\r\n\r\n    let treemapPieceMerged = treemapPieceGroupEnter.merge(treemapPieceGroup);\r\n\r\n    treemapPieceMerged\r\n      .on('click', null)\r\n      .on('click', (e, d) => {\r\n        console.log('data', d);\r\n        console.log('old filter', filters);\r\n        console.log('new filter', [...filters, d.data.key]);\r\n        setFilters([...filters, d.data.key])\r\n      })\r\n      .transition().duration(500)\r\n      .attr(\"transform\", d => `translate(${d.x0},${d.y0})`)\r\n\r\n    treemapPieceMerged.select(\"rect\")\r\n      .transition().duration(500)\r\n      .attr('width', d => d.x1 - d.x0)\r\n      .attr('height', d => d.y1 - d.y0)\r\n\r\n    treemapPieceMerged.select(\"text.text-name\")\r\n      .transition().duration(500)\r\n      .attr(\"x\", d => 5)\r\n      .attr(\"y\", d => 20)\r\n      .text(d => d.data.key)\r\n    \r\n    treemapPieceMerged.select(\"text.text-value\")\r\n      .transition().duration(500)\r\n      .attr(\"x\", d => 5)\r\n      .attr(\"y\", d => 40)\r\n      .text(d => d.value.toLocaleString())\r\n\r\n    treemapPieceGroup.exit().remove();\r\n\r\n  }, [svgRef, nestedData, filters, width, height])\r\n\r\n  return (\r\n    <div ref={observe} style={{\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      display: 'flex',\r\n      flexDirection: 'column'\r\n    }}>\r\n      <div style={{ height: 50 }}>\r\n        {filters.map((x, i) => <>\r\n          <button type=\"button\" onClick={() => navigateTo(x, i)}>{x}</button>\r\n        </>)}\r\n        {/* {JSON.stringify(filters)} */}\r\n      </div>\r\n      <svg ref={svgRef} width={width} height={height - 50}>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Treemap;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Treemap from \"./components/Treemap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Treemap />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}